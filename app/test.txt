import React, { useState, useEffect, useRef } from "react";
import socket from "../models/socketInit";
import LineChart from "../components/LineChart";

const ControlMotorView = () => {
    const [currentAngle, setCurrentAngle] = useState(0);
    const [hasConnection, setHasConnection] = useState(true);
    const [mode, setMode] = useState("manual"); // "manual" or "automatic"
    const canvasRef = useRef(null);
    
    useEffect(() => {
        const fetchData = (data) => {
            try {
                // Extraire les données du message reçu : "Mode: X, Angle: Y"
                const [, anglePart] = data.split(",");
                const angle = parseInt(anglePart.split(":")[1].trim(), 10);

                // Mettre à jour l'angle actuel et enregistrer dans la liste
                setCurrentAngle(angle);
                setAngles((prevAngles) => [...prevAngles, angle]);

                // Si la connexion était perdue, la rétablir
                if (!hasConnection) {
                    setHasConnection(true);
                }
            } catch (error) {
                console.error("Erreur lors de l'analyse des données reçues :", error);
            }
        };

        const handleDisconnect = () => {
            setHasConnection(false);
        };
      
        socket.on("serialData", fetchData);
        socket.on("disconnect", handleDisconnect);

        // Nettoyage des écouteurs à la fin du cycle de vie du composant
        return () => {
            socket.off("serialData", fetchData);
            socket.off("disconnect", handleDisconnect);
        };
    }, [hasConnection]);
    
    const handleAngleChange = (event) => {
        const newAngle = event.target.value;
        setCurrentAngle(newAngle);
        if (mode === "manual") {
            socket.emit("message", `1,1,${newAngle}`);  // Mode manuel, servo activé, angle
        }
    };
    
    const handleModeChange = (event) => {
        const newMode = event.target.value;
        setMode(newMode);
        if (newMode === "automatic") {
            socket.emit("message", `2,1`);  // Mode automatique, servo activé
        }
    };

    useEffect(() => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext("2d");

        const drawRadar = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            const centerX = canvas.width / 2;
            const centerY = canvas.height - 20; // Position du centre (20px du bas)
            const radius = canvas.height - 40; // Rayon du radar

            // Dessiner le fond
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Dessiner les cercles concentriques
            ctx.strokeStyle = "green";
            ctx.lineWidth = 1;
            for (let i = 1; i <= 4; i++) {
                ctx.beginPath();
                ctx.arc(centerX, centerY, (radius / 4) * i, Math.PI, 2 * Math.PI);
                ctx.stroke();
            }

            // Dessiner les lignes radiales et les degrés
            for (let angle = 0; angle <= 180; angle += 15) {
                const rad = (Math.PI / 180) * angle;
                const x = centerX + Math.cos(rad) * radius;
                const y = centerY - Math.sin(rad) * radius;

                // Ligne radiale
                ctx.beginPath();
                ctx.moveTo(centerX, centerY);
                ctx.lineTo(x, y);
                ctx.stroke();

                // Ajouter les étiquettes de degrés
                const labelX = centerX + Math.cos(rad) * (radius + 20);
                const labelY = centerY - Math.sin(rad) * (radius + 20);
                ctx.fillStyle = "green";
                ctx.font = "14px Arial";
                ctx.fillText(`${angle}°`, labelX - 15, labelY);
            }
        };

        const drawArrow = (angle) => {
            const rad = (Math.PI / 180) * angle;
            const x = canvas.width / 2 + Math.cos(rad) * (canvas.height - 40);
            const y = canvas.height - 20 - Math.sin(rad) * (canvas.height - 40);

            ctx.strokeStyle = "red";
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, canvas.height - 20);
            ctx.lineTo(x, y);
            ctx.stroke();
        };

        drawRadar();
        drawArrow(currentAngle);
    }, [currentAngle]);

    return (
        <div className="flex flex-col items-center justify-center min-h-screen">
            {/* Contrôles en haut */}
            <div className="w-full max-w-5xl border-b-2 border-gray-300 p-5 flex flex-col items-center bg-white shadow-md">
                <div id="currentAngle" className="text-xl font-semibold mb-2 uppercase text-shadow-10">
                    Current Angle: {currentAngle}
                </div>

                <div className="mb-2">
                    <label htmlFor="modeSelect" className="mr-2 text-lg font-semibold">Mode:</label>
                    <select
                        id="modeSelect"
                        value={mode}
                        onChange={handleModeChange}
                        className="border p-2 rounded"
                    >
                        <option value="manual">Manuel</option>
                        <option value="automatic">Automatique</option>
                    </select>
                </div>

                {mode === "manual" && (
                    <div className="flex flex-col items-center">
                        <label htmlFor="angleRange" className="mb-2 text-lg">Angle:</label>
                        <input
                            type="range"
                            id="angleRange"
                            className="w-full max-w-md mb-2"
                            min="0"
                            max="180"
                            value={currentAngle}
                            step="10"
                            onChange={handleAngleChange}
                        />
                        <span id="angleValue" className="text-lg font-semibold">{currentAngle}</span>
                    </div>
                )}
            </div>

            {/* Zone radar */}
            <div className="w-full flex justify-center mt-2">
                <canvas ref={canvasRef} width="800" height="400" className="border border-gray-300 shadow-lg"></canvas>
            </div>
        </div>
    );
};

export default ControlMotorView;

